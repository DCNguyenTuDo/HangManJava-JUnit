package udo.edu.game;



import java.sql.ResultSet;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import udo.edu.dbconnect.ConnectDB;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

/**
 *
 * @author Ninhc1010l, DC Nguyen - edited by DCNguyen
 */
public class Game extends javax.swing.JFrame {
    //Lấy tất cả câu tả lời trong CSDL ra 1 chuỗi để random

    String answertotal = "";
    //Lấy tất cả câu hỏi trong CSDL ra 1 chuỗi để random
    String questiontotal = "";
    //Biến error để kiểm tra số lần nhập từ sai. nếu error=0 =>> Thua
    int error;
    //Câu trả lời sau khi random
    String answer = "";
    //Câu hỏi sau khi random
    String question = "";
    //Mảng kiểu char độ rộng bằng length của question nhưng các kí tự hiện lên sẽ là *** or --- 
    //Để người chơi đoán 
    char[] cAnswer;
    StringBuffer bs;

    /** Creates new form game */
    public Game() {
        initComponents();
        setTitle("Hangman - Have fun with Hangman");
        initGame();
        loadquestion();
        setLocationRelativeTo(this);
    }
    //Lấy câu hỏi & câu trả lời rồi gán vào các biến

    public void initGame() {
        //Lấy dữ liệu từ CSDL
        ResultSet rs = ConnectDB.getResultset("select * from game");
        try {
            while (rs.next()) {
                //Add tất cả câu trả lời vào chuỗi answertotal + "|" 
                //Để thực hiện việc tách chuỗi để random
                answertotal += rs.getString("Answer");
                answertotal += "|";
                //Add tất cả câu hỏi lời vào chuỗi questiontotal
                questiontotal += rs.getString("Question");
                questiontotal += "|";
            }
            //Khai báo 2 mảng kiểu String để tách 2 chuỗi question và answer
            String[] atemp;
            String[] qtemp;
            atemp = answertotal.split("\\|");
            qtemp = questiontotal.split("\\|");
            //Thực hiện random cau hỏi & câu trả lời
            Random randomGenerator = new Random();
            int randomInt = randomGenerator.nextInt(atemp.length);
            //Lấy ra câu hỏi và câu trả lời sau khi random
            answer = new String(atemp[randomInt]);
            question = new String(qtemp[randomInt]);
            //In ra câu hỏi
            lblquestion.setText(question);
            //Set độ rộng cho mảng answer (**** or ----)
            cAnswer = new char[answer.length()];
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    //Load câu hỏi

    public void loadquestion() {
        initGame();
        //Cho phép trả lời sai tối đa 9 lần
        error = 9;
        lblstatus.setText("You have: " + error + " times left");
        //Gán mảng answer bằng ***** hoặc ---- (mình dùng ....) :D
        for (int i = 0; i < cAnswer.length; i++) {
            cAnswer[i] = '*';
        }
        String str = new String(cAnswer);
        lblAnswer.setText(str);
        txtkey.requestFocus();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblAnswer = new javax.swing.JLabel();
        txtkey = new javax.swing.JTextField();
        btnok = new javax.swing.JButton();
        lblquestion = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        lblstatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Hangman game");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Question"));

        lblAnswer.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblAnswer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtkey.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter one character"));
        txtkey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtkeyActionPerformed(evt);
            }
        });
        txtkey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtkeyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtkeyKeyReleased(evt);
            }
        });

        btnok.setText("OK");
        btnok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnokActionPerformed(evt);
            }
        });

        lblquestion.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblquestion.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("New Game");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGap(40)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING, false)
        				.addComponent(lblquestion, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(lblAnswer, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
        			.addGap(31)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(btnok, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(txtkey, GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
        				.addComponent(jButton1, GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
        			.addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(lblAnswer, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
        				.addComponent(txtkey, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(btnok)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jButton1)
        			.addPreferredGap(ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
        			.addComponent(lblquestion, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
        );
        jPanel1.setLayout(jPanel1Layout);

        lblstatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(180)
        					.addComponent(jLabel1))
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(lblstatus, GroupLayout.PREFERRED_SIZE, 128, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, 505, GroupLayout.PREFERRED_SIZE))))
        			.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jLabel1)
        			.addGap(29)
        			.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        			.addComponent(lblstatus, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void txtkeyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtkeyKeyReleased
    //
}//GEN-LAST:event_txtkeyKeyReleased

private void btnokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnokActionPerformed
    //Bắt lỗi để trống
    if (txtkey.getText().equals("")) {
        JOptionPane.showMessageDialog(this, "Please enter one character !!!");
        txtkey.requestFocus();
        return;
    }
    //Chỉ được phép nhập 1 kí tự
    if (txtkey.getText().length() > 1) {
        JOptionPane.showMessageDialog(this, "Only one character is allowed");
        txtkey.setText("");
        txtkey.requestFocus();
        return;
    }
    //khai báo mảng k để kiểm tra xem từ khóa nhập vào nếu xuất hiện thì ở vị trí nào
    //Để cho chữ cái đấy hiện ra. VD answer của mình là hello (*****)
    //khi nhập vào kí tự 'e' =>> e xuất hiện tại k[1]. ->> settext ->> *e***
    int[] k = new int[answer.length()];
    //Biến count kiểm tra xem từ khóa nhập vào có xuất hiện trong câu trả lời không
    //Nếu count==0 =>> ko xuất hiện
    int count = 0;
    //Tách answer thành mảng để kiểm tra xem có chứa từ khóa nhập vào ko
    char[] c = answer.toCharArray();
    //Từ khóa nhập vào từ bạn phím
    char keyword = txtkey.getText().charAt(0);
    //Dùng vòng lặp duỵêt đến hết chuỗi answer xem answer có chứa từ khóa ko
    //Bình thường có thể kiểm tra luôn ko cần vòng lặp.
    //Tuy nhiên vì answer có thể chứa nhiều từ khóa giống nhau nên phải lặp
    //VD hello khi chứa 2 từ khóa 'l' nếu ko lặp nó chỉ hiển thị ddc kí tự 'l' đầu tiên
    for (int i = 0; i < c.length; i++) {
        if (Character.toLowerCase(c[i])==Character.toLowerCase(keyword)) {
            //nếu từ khóa xuất hiện trong answer ->> vị trí xuất hiện =i
            k[count] = i;
            count++;
        }
    }
    //Nếu count =0 ->> answer ko chứa từ khóa ->> lỗi giảm xuống 1 lần ->> Bắt đầu treo cổ :|
    if (count == 0) {
        error--;
      // lbltreo.setIcon(new ImageIcon(this.getClass().getResource("0.jpg)));
        lblstatus.setText("You have: " + error + "times left");
    } else {
        //Nếu ko thì dùng hàm setcharat của Stringbuffer để hiển thị chữ cái xuất hiện trong answer
        //Rồi Hiển thị chuỗi mới lên
        bs = new StringBuffer(lblAnswer.getText());
        for (int i = 0; i < count; i++) {
            bs.setCharAt(k[i], keyword);
        }
        lblAnswer.setText(bs.toString());
    }
    //Nếu error==0 ->> thua ->>Load câu hỏi mới
    if (error < 1) {
        lblAnswer.setText(answer);
        JOptionPane.showMessageDialog(this, "You Lose !!!");
        //lbltreo.setIcon(null);
        loadquestion();
    }
    //Nếu Chuỗi hiện thị ra mà = answer ->> Win ->>Load câu hỏi mới
    if (lblAnswer.getText().equalsIgnoreCase(answer)) {
        JOptionPane.showMessageDialog(this, "You Win !!!");
        //lbltreo.setIcon(null);
        loadquestion();
    }
    txtkey.setText("");
    txtkey.requestFocus();
}//GEN-LAST:event_btnokActionPerformed

private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
}//GEN-LAST:event_formKeyReleased

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    loadquestion();
    txtkey.requestFocus();
}//GEN-LAST:event_jButton1ActionPerformed

private void txtkeyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtkeyKeyPressed
    //
}//GEN-LAST:event_txtkeyKeyPressed

    private void txtkeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtkeyActionPerformed
        // TODO add your handling code here:
        btnok.doClick();
    }//GEN-LAST:event_txtkeyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Game().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnok;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAnswer;
    private javax.swing.JLabel lblquestion;
    private javax.swing.JLabel lblstatus;
    private javax.swing.JTextField txtkey;
    // End of variables declaration//GEN-END:variables
}
